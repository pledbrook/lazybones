apply plugin: "groovy"
apply plugin: "application"

mainClassName = "uk.co.cacoethes.lazybones.LazyBonesMain"
version = "0.2.1"

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

configurations {
    templates
}

ext {
    templatesDir = new File(projectDir, "src/templates")
}

sourceSets {
    integTest {
        groovy {
            srcDir "src/integ/groovy"
        }
        resources {
            srcDir "src/integ/resources"
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    groovy "org.codehaus.groovy:groovy:2.1.3"
    compile "org.codehaus.groovy:groovy-ant:2.1.3"
    compile "org.apache.commons:commons-compress:1.5",
            "com.github.groovy-wslite:groovy-wslite:0.7.2"
    testCompile "junit:junit:4.11"
    integTestCompile "commons-io:commons-io:2.4", "org.spockframework:spock-core:0.7-groovy-2.0"
}

task integTests(type: Test, dependsOn: "installApp") {
    systemProperty "lazybones.testWorkDir", new File(buildDir, "testWork").path
    systemProperty "lazybones.installDir", tasks.installApp.destinationDir.path

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
    include "**/*Spec*"
    exclude "**/Abstract*Spec*"
}

distZip.dependsOn "integTests"

task uploadDist(type: BinTrayGenericUpload, dependsOn: "distZip") {
    artifactFile = distZip.archivePath
    artifactUrl = "lazybones/$version/${distZip.archiveName}"
}

// Checks that the build has access to properties that should be defined
// externally, such as usernames, passwords, etc.
task verifyProps << {
    def requiredProps = ["repo.url", "repo.username", "repo.apiKey"]
    def missingProps = requiredProps.findAll { !project.hasProperty(it) }

    if (missingProps) {
        throw new GradleException("You must define the build properties '${missingProps.join('\', \'')}'" + 
                " before you can execute this target.")
    }
}

/**
 * Generates tasks to package individual project templates into zip archives.
 */
tasks.addRule("Pattern: packageTemplate-<proj>") { String taskName ->
    def m = taskName =~ /packageTemplate-(\S+)/
    if (m) {
        def tmplName = m[0][1]
        def tmplDir = new File(templatesDir, tmplName)

        if (!tmplDir.exists()) {
            logger.error "No project template directory found for '${tmplName}'"
            return
        }

        task(taskName, type: Zip) {
            baseName = "${tmplName}-template"
            destinationDir = buildDir
            excludes = ["**/.retain"]
            includeEmptyDirs = true
            version = new File(tmplDir, "VERSION").text.trim()

            from tmplDir
            exclude "**/.retain", "VERSION", ".gradle"
        }
    }
}

/**
 * Packages all the project templates into zip archives.
 */
def templateDirs = templatesDir.listFiles({ f -> f.directory} as FileFilter)
task packageTemplates(dependsOn: templateDirs.collect { project.tasks["packageTemplate-${it.name}"] })

/**
 * Generates tasks to publish individual project template archives to BinTray.
 */
tasks.addRule("Pattern: publish-<proj>") { String taskName ->
    def m = taskName =~ /publish-(\S+)/
    if (m) {
        def tmplName = m[0][1]
        def tmplDir = new File(templatesDir, tmplName)

        if (!tmplDir.exists()) {
            logger.error "No project template directory found for '${tmplName}'"
            return
        }

        def version = new File(tmplDir, "VERSION").text.trim()
        def archiveName = tmplName + "-template-" + version + ".zip"

        task(taskName, type: BinTrayGenericUpload, dependsOn: ["verifyProps", "packageTemplate-$tmplName"]) {
            artifactFile = new File(project.buildDir, archiveName)
            artifactUrl = "${tmplName}-template/${version}/${archiveName}"

            doFirst {
                if (!artifactFile.exists()) {
                    throw new GradleException("Bad build file: zip archive '$archiveName' does not exist," +
                            " but should have been created automatically.")
                }
            }
        }
    }
}

/**
 * Publishes all the project template zip archives.
 */
task publishTemplates(dependsOn: templateDirs.collect { project.tasks["publish-${it.name}"] })

task wrapper(type: Wrapper) {
    gradleVersion = '1.5'
}

class BinTrayGenericUpload extends DefaultTask {
    @InputFile
    File artifactFile

    @Input
    String artifactUrl

    @TaskAction
    def publish() {

        def username = project.getProperty("repo.username")
        def password = project.getProperty("repo.apiKey")

        def url = new URL(project.getProperty("repo.url") + "/" + artifactUrl)
        logger.lifecycle "Streaming artifact to BinTray at URL ${url}"
        url.openConnection().with {
            // Add basic authentication header.
            setRequestProperty "Authorization", "Basic " + "$username:$password".getBytes().encodeBase64().toString()

            doOutput = true
            fixedLengthStreamingMode = artifactFile.size()
            requestMethod = "PUT"

            def inputStream = artifactFile.newInputStream() 
            try {
                outputStream << inputStream
            }
            finally {
                inputStream.close()
                outputStream.close()
            }

            assert responseCode >= 200 && responseCode < 300
        }
    }
}
